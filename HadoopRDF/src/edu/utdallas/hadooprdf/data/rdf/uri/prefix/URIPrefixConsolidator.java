package edu.utdallas.hadooprdf.data.rdf.uri.prefix;


/**
 * A class which consolidates prefixes generated by
 * more than one URIPrefixTree
 * @author Mohammad Farhan Husain
 *
 */
public class URIPrefixConsolidator extends PrefixTree {
	/**
	 * The class constructor
	 */
	public URIPrefixConsolidator(String sPrefixPrefix) {
		super(sPrefixPrefix);
	}
	/**
	 * Add a prefix and its corresponding replacement string
	 * @param sPrefix
	 * @param sReplacementString
	 */
	public void addPrefixAndReplacementString(String sPrefix, String sReplacementString) {
		PrefixConsolidatorNode node = (PrefixConsolidatorNode) m_TreeRoots.get(sPrefix.charAt(0));
		if (null == node) {
			node = new PrefixConsolidatorNode(sPrefix.charAt(0));
			m_TreeRoots.put(sPrefix.charAt(0), node);
		}
		node.addChild(sPrefix, 1, sReplacementString);
	}
	/* (non-Javadoc)
	 * @see edu.utdallas.hadooprdf.rdf.uri.prefix.PrefixTree#generateLongestCommonPrefixes(edu.utdallas.hadooprdf.rdf.uri.prefix.PrefixNode, java.lang.StringBuffer)
	 */
	@Override
	protected void generateLongestCommonPrefixes(PrefixNode node,
			StringBuffer sbPrefix) {
		PrefixConsolidatorNode pcnode = (PrefixConsolidatorNode) node;
		sbPrefix.append(node.getCharacter());
		if (pcnode.hasReplacementPrefix())
			m_LongestCommonPrefixes.put(pcnode.getReplacementPrefix(), sbPrefix.toString());
		else if (1 == pcnode.getNumberOfChildren())
			generateLongestCommonPrefixes(pcnode.getSingleChild(), sbPrefix);
		else if (sbPrefix.toString().endsWith("://") || sbPrefix.toString().equalsIgnoreCase(("http://www."))) {
			for(PrefixNode child : node.getChildren().values())
				generateLongestCommonPrefixes(child, new StringBuffer(sbPrefix));
		}
		else {
			String sReplacementPrefix = m_sPrefixPrefix + m_iPrefixCount;
			if (sReplacementPrefix.length() < sbPrefix.length()) {
				m_LongestCommonPrefixes.put(sReplacementPrefix, sbPrefix.toString());
				m_iPrefixCount++;
			}
		}
	}
}
